
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d84  08002d84  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002d84  08002d84  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d84  08002d84  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000048  08002dd4  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002dd4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000852b  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b08  00000000  00000000  000285df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cf  00000000  00000000  0002ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168d5  00000000  00000000  0002b2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba01  00000000  00000000  00041bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081fb0  00000000  00000000  0004d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028a0  00000000  00000000  000cf580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d1e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d48 	.word	0x08002d48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002d48 	.word	0x08002d48

0800014c <sevenledsetA>:
 *  Created on: Nov 12, 2023
 *      Author: quoca
 */
#include "7led.h"
void sevenledsetA(int value)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(value)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8094 	bhi.w	8000284 <sevenledsetA+0x138>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <sevenledsetA+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001a7 	.word	0x080001a7
 800016c:	080001c1 	.word	0x080001c1
 8000170:	080001db 	.word	0x080001db
 8000174:	080001f5 	.word	0x080001f5
 8000178:	0800020f 	.word	0x0800020f
 800017c:	08000229 	.word	0x08000229
 8000180:	08000243 	.word	0x08000243
 8000184:	0800025d 	.word	0x0800025d
 8000188:	0800026b 	.word	0x0800026b
	{
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000192:	4845      	ldr	r0, [pc, #276]	; (80002a8 <sevenledsetA+0x15c>)
 8000194:	f001 fdb5 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019e:	4842      	ldr	r0, [pc, #264]	; (80002a8 <sevenledsetA+0x15c>)
 80001a0:	f001 fdaf 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80001a4:	e07b      	b.n	800029e <sevenledsetA+0x152>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80001ac:	483e      	ldr	r0, [pc, #248]	; (80002a8 <sevenledsetA+0x15c>)
 80001ae:	f001 fda8 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 80001b8:	483b      	ldr	r0, [pc, #236]	; (80002a8 <sevenledsetA+0x15c>)
 80001ba:	f001 fda2 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80001be:	e06e      	b.n	800029e <sevenledsetA+0x152>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 80001c6:	4838      	ldr	r0, [pc, #224]	; (80002a8 <sevenledsetA+0x15c>)
 80001c8:	f001 fd9b 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9 | GPIO_PIN_12, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80001d2:	4835      	ldr	r0, [pc, #212]	; (80002a8 <sevenledsetA+0x15c>)
 80001d4:	f001 fd95 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80001d8:	e061      	b.n	800029e <sevenledsetA+0x152>
		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 80001e0:	4831      	ldr	r0, [pc, #196]	; (80002a8 <sevenledsetA+0x15c>)
 80001e2:	f001 fd8e 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_SET); 
 80001e6:	2201      	movs	r2, #1
 80001e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80001ec:	482e      	ldr	r0, [pc, #184]	; (80002a8 <sevenledsetA+0x15c>)
 80001ee:	f001 fd88 	bl	8001d02 <HAL_GPIO_WritePin>
			break; 
 80001f2:	e054      	b.n	800029e <sevenledsetA+0x152>
		case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80001fa:	482b      	ldr	r0, [pc, #172]	; (80002a8 <sevenledsetA+0x15c>)
 80001fc:	f001 fd81 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <sevenledsetA+0x15c>)
 8000208:	f001 fd7b 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 800020c:	e047      	b.n	800029e <sevenledsetA+0x152>
		case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000214:	4824      	ldr	r0, [pc, #144]	; (80002a8 <sevenledsetA+0x15c>)
 8000216:	f001 fd74 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_11, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000220:	4821      	ldr	r0, [pc, #132]	; (80002a8 <sevenledsetA+0x15c>)
 8000222:	f001 fd6e 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 8000226:	e03a      	b.n	800029e <sevenledsetA+0x152>
		case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800022e:	481e      	ldr	r0, [pc, #120]	; (80002a8 <sevenledsetA+0x15c>)
 8000230:	f001 fd67 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023a:	481b      	ldr	r0, [pc, #108]	; (80002a8 <sevenledsetA+0x15c>)
 800023c:	f001 fd61 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 8000240:	e02d      	b.n	800029e <sevenledsetA+0x152>
		case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000248:	4817      	ldr	r0, [pc, #92]	; (80002a8 <sevenledsetA+0x15c>)
 800024a:	f001 fd5a 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000254:	4814      	ldr	r0, [pc, #80]	; (80002a8 <sevenledsetA+0x15c>)
 8000256:	f001 fd54 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 800025a:	e020      	b.n	800029e <sevenledsetA+0x152>
		case 8:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000262:	4811      	ldr	r0, [pc, #68]	; (80002a8 <sevenledsetA+0x15c>)
 8000264:	f001 fd4d 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 8000268:	e019      	b.n	800029e <sevenledsetA+0x152>
		case 9:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <sevenledsetA+0x15c>)
 8000272:	f001 fd46 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027c:	480a      	ldr	r0, [pc, #40]	; (80002a8 <sevenledsetA+0x15c>)
 800027e:	f001 fd40 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 8000282:	e00c      	b.n	800029e <sevenledsetA+0x152>
		default:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800028a:	4807      	ldr	r0, [pc, #28]	; (80002a8 <sevenledsetA+0x15c>)
 800028c:	f001 fd39 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_13, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <sevenledsetA+0x15c>)
 8000298:	f001 fd33 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 800029c:	bf00      	nop
	}
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40010800 	.word	0x40010800

080002ac <sevenledsetB>:

void sevenledsetB(int value)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	switch(value)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b09      	cmp	r3, #9
 80002b8:	f200 8094 	bhi.w	80003e4 <sevenledsetB+0x138>
 80002bc:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <sevenledsetB+0x18>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002ed 	.word	0x080002ed
 80002c8:	08000307 	.word	0x08000307
 80002cc:	08000321 	.word	0x08000321
 80002d0:	0800033b 	.word	0x0800033b
 80002d4:	08000355 	.word	0x08000355
 80002d8:	0800036f 	.word	0x0800036f
 80002dc:	08000389 	.word	0x08000389
 80002e0:	080003a3 	.word	0x080003a3
 80002e4:	080003bd 	.word	0x080003bd
 80002e8:	080003cb 	.word	0x080003cb
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80002f2:	4845      	ldr	r0, [pc, #276]	; (8000408 <sevenledsetB+0x15c>)
 80002f4:	f001 fd05 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4842      	ldr	r0, [pc, #264]	; (8000408 <sevenledsetB+0x15c>)
 8000300:	f001 fcff 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 8000304:	e07b      	b.n	80003fe <sevenledsetB+0x152>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7140 	mov.w	r1, #768	; 0x300
 800030c:	483e      	ldr	r0, [pc, #248]	; (8000408 <sevenledsetB+0x15c>)
 800030e:	f001 fcf8 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 8000318:	483b      	ldr	r0, [pc, #236]	; (8000408 <sevenledsetB+0x15c>)
 800031a:	f001 fcf2 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 800031e:	e06e      	b.n	80003fe <sevenledsetB+0x152>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 8000326:	4838      	ldr	r0, [pc, #224]	; (8000408 <sevenledsetB+0x15c>)
 8000328:	f001 fceb 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9 | GPIO_PIN_12, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000332:	4835      	ldr	r0, [pc, #212]	; (8000408 <sevenledsetB+0x15c>)
 8000334:	f001 fce5 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 8000338:	e061      	b.n	80003fe <sevenledsetB+0x152>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000340:	4831      	ldr	r0, [pc, #196]	; (8000408 <sevenledsetB+0x15c>)
 8000342:	f001 fcde 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_SET); 
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800034c:	482e      	ldr	r0, [pc, #184]	; (8000408 <sevenledsetB+0x15c>)
 800034e:	f001 fcd8 	bl	8001d02 <HAL_GPIO_WritePin>
			break; 
 8000352:	e054      	b.n	80003fe <sevenledsetB+0x152>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 800035a:	482b      	ldr	r0, [pc, #172]	; (8000408 <sevenledsetB+0x15c>)
 800035c:	f001 fcd1 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000366:	4828      	ldr	r0, [pc, #160]	; (8000408 <sevenledsetB+0x15c>)
 8000368:	f001 fccb 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 800036c:	e047      	b.n	80003fe <sevenledsetB+0x152>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000374:	4824      	ldr	r0, [pc, #144]	; (8000408 <sevenledsetB+0x15c>)
 8000376:	f001 fcc4 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_11, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000380:	4821      	ldr	r0, [pc, #132]	; (8000408 <sevenledsetB+0x15c>)
 8000382:	f001 fcbe 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 8000386:	e03a      	b.n	80003fe <sevenledsetB+0x152>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800038e:	481e      	ldr	r0, [pc, #120]	; (8000408 <sevenledsetB+0x15c>)
 8000390:	f001 fcb7 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039a:	481b      	ldr	r0, [pc, #108]	; (8000408 <sevenledsetB+0x15c>)
 800039c:	f001 fcb1 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80003a0:	e02d      	b.n	80003fe <sevenledsetB+0x152>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7160 	mov.w	r1, #896	; 0x380
 80003a8:	4817      	ldr	r0, [pc, #92]	; (8000408 <sevenledsetB+0x15c>)
 80003aa:	f001 fcaa 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80003b4:	4814      	ldr	r0, [pc, #80]	; (8000408 <sevenledsetB+0x15c>)
 80003b6:	f001 fca4 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80003ba:	e020      	b.n	80003fe <sevenledsetB+0x152>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80003c2:	4811      	ldr	r0, [pc, #68]	; (8000408 <sevenledsetB+0x15c>)
 80003c4:	f001 fc9d 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80003c8:	e019      	b.n	80003fe <sevenledsetB+0x152>
		case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <sevenledsetB+0x15c>)
 80003d2:	f001 fc96 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003dc:	480a      	ldr	r0, [pc, #40]	; (8000408 <sevenledsetB+0x15c>)
 80003de:	f001 fc90 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80003e2:	e00c      	b.n	80003fe <sevenledsetB+0x152>
		default:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <sevenledsetB+0x15c>)
 80003ec:	f001 fc89 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_13, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <sevenledsetB+0x15c>)
 80003f8:	f001 fc83 	bl	8001d02 <HAL_GPIO_WritePin>
			break;
 80003fc:	bf00      	nop
	}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010c00 	.word	0x40010c00

0800040c <SubKeyProcess>:
static int KeyReg2 = 1;
static int KeyReg3 = 1;
static int Timerforkeypressed = 200;
int button0_trigger = 0;
static void SubKeyProcess()
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	button0_trigger = 1;
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <SubKeyProcess+0x14>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000064 	.word	0x20000064

08000424 <GetkeyInput0>:

void GetkeyInput0()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <GetkeyInput0+0x84>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <GetkeyInput0+0x88>)
 800042e:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <GetkeyInput0+0x8c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <GetkeyInput0+0x84>)
 8000436:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	481d      	ldr	r0, [pc, #116]	; (80004b4 <GetkeyInput0+0x90>)
 800043e:	f001 fc49 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	461a      	mov	r2, r3
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <GetkeyInput0+0x8c>)
 8000448:	601a      	str	r2, [r3, #0]
	if (KeyReg0 == KeyReg1 && KeyReg1 == KeyReg2)
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <GetkeyInput0+0x88>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <GetkeyInput0+0x84>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	429a      	cmp	r2, r3
 8000454:	d125      	bne.n	80004a2 <GetkeyInput0+0x7e>
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <GetkeyInput0+0x84>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <GetkeyInput0+0x8c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d11f      	bne.n	80004a2 <GetkeyInput0+0x7e>
	{
		if (KeyReg3 != KeyReg2)
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <GetkeyInput0+0x94>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <GetkeyInput0+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	429a      	cmp	r2, r3
 800046c:	d00d      	beq.n	800048a <GetkeyInput0+0x66>
		{
			KeyReg3 = KeyReg2;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <GetkeyInput0+0x8c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <GetkeyInput0+0x94>)
 8000474:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == 0)
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <GetkeyInput0+0x8c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d111      	bne.n	80004a2 <GetkeyInput0+0x7e>
			{
				SubKeyProcess();
 800047e:	f7ff ffc5 	bl	800040c <SubKeyProcess>
				Timerforkeypressed = 200;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <GetkeyInput0+0x98>)
 8000484:	22c8      	movs	r2, #200	; 0xc8
 8000486:	601a      	str	r2, [r3, #0]
			}
		}
			
	}
	
}
 8000488:	e00b      	b.n	80004a2 <GetkeyInput0+0x7e>
			Timerforkeypressed--;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <GetkeyInput0+0x98>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3b01      	subs	r3, #1
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <GetkeyInput0+0x98>)
 8000492:	6013      	str	r3, [r2, #0]
			if (Timerforkeypressed == 0)
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <GetkeyInput0+0x98>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <GetkeyInput0+0x7e>
				Timerforkeypressed = 200;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <GetkeyInput0+0x98>)
 800049e:	22c8      	movs	r2, #200	; 0xc8
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000004 	.word	0x20000004
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000008 	.word	0x20000008
 80004b4:	40011000 	.word	0x40011000
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	20000010 	.word	0x20000010

080004c0 <SubKeyProcess>:

int button1_trigger = 0;
int button1_trigger_long = 0;

static void SubKeyProcess()
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	button1_trigger = 1;
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <SubKeyProcess+0x14>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000068 	.word	0x20000068

080004d8 <SubKeyProcessLong>:
static void SubKeyProcessLong()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	button1_trigger_long = 1;
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <SubKeyProcessLong+0x14>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000006c 	.word	0x2000006c

080004f0 <GetkeyInput1>:
void GetkeyInput1()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <GetkeyInput1+0xa4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a27      	ldr	r2, [pc, #156]	; (8000598 <GetkeyInput1+0xa8>)
 80004fa:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <GetkeyInput1+0xac>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a24      	ldr	r2, [pc, #144]	; (8000594 <GetkeyInput1+0xa4>)
 8000502:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000508:	4825      	ldr	r0, [pc, #148]	; (80005a0 <GetkeyInput1+0xb0>)
 800050a:	f001 fbe3 	bl	8001cd4 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <GetkeyInput1+0xac>)
 8000514:	601a      	str	r2, [r3, #0]
	if (KeyReg0 == KeyReg1 && KeyReg1 == KeyReg2)
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <GetkeyInput1+0xa8>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <GetkeyInput1+0xa4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	429a      	cmp	r2, r3
 8000520:	d136      	bne.n	8000590 <GetkeyInput1+0xa0>
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <GetkeyInput1+0xa4>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <GetkeyInput1+0xac>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d130      	bne.n	8000590 <GetkeyInput1+0xa0>
	{
		if(KeyReg3 != KeyReg2)
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <GetkeyInput1+0xb4>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <GetkeyInput1+0xac>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d00d      	beq.n	8000556 <GetkeyInput1+0x66>
		{
			KeyReg3 = KeyReg2;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <GetkeyInput1+0xac>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <GetkeyInput1+0xb4>)
 8000540:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == 0)
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <GetkeyInput1+0xac>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d117      	bne.n	800057a <GetkeyInput1+0x8a>
			{
				SubKeyProcess();
 800054a:	f7ff ffb9 	bl	80004c0 <SubKeyProcess>
				Timerforkeypressed = 100;			 
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <GetkeyInput1+0xb8>)
 8000550:	2264      	movs	r2, #100	; 0x64
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e011      	b.n	800057a <GetkeyInput1+0x8a>
			}
		}
		else
		{
			Timerforkeypressed--;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <GetkeyInput1+0xb8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <GetkeyInput1+0xb8>)
 800055e:	6013      	str	r3, [r2, #0]
			if (Timerforkeypressed == 0)
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <GetkeyInput1+0xb8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d108      	bne.n	800057a <GetkeyInput1+0x8a>
			{
				if (KeyReg2 == 0)
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <GetkeyInput1+0xac>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d101      	bne.n	8000574 <GetkeyInput1+0x84>
				{
					SubKeyProcessLong();
 8000570:	f7ff ffb2 	bl	80004d8 <SubKeyProcessLong>
				}
				Timerforkeypressed = 100;						 
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <GetkeyInput1+0xb8>)
 8000576:	2264      	movs	r2, #100	; 0x64
 8000578:	601a      	str	r2, [r3, #0]
			}
		}
		if (KeyReg2 == 1 && button1_trigger_long == 1)
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <GetkeyInput1+0xac>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d106      	bne.n	8000590 <GetkeyInput1+0xa0>
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <GetkeyInput1+0xbc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d102      	bne.n	8000590 <GetkeyInput1+0xa0>
		{
			button1_trigger_long = 0;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <GetkeyInput1+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000018 	.word	0x20000018
 8000598:	20000014 	.word	0x20000014
 800059c:	2000001c 	.word	0x2000001c
 80005a0:	40011000 	.word	0x40011000
 80005a4:	20000020 	.word	0x20000020
 80005a8:	20000024 	.word	0x20000024
 80005ac:	2000006c 	.word	0x2000006c

080005b0 <SubKeyProcess>:
static int KeyReg2 = 1;
static int KeyReg3 = 1;
static int Timerforkeypressed = 200;
int button2_trigger = 0;
static void SubKeyProcess()
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	button2_trigger = 1;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <SubKeyProcess+0x14>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000070 	.word	0x20000070

080005c8 <GetkeyInput2>:

void GetkeyInput2()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <GetkeyInput2+0x84>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <GetkeyInput2+0x88>)
 80005d2:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <GetkeyInput2+0x8c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <GetkeyInput2+0x84>)
 80005da:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	481d      	ldr	r0, [pc, #116]	; (8000658 <GetkeyInput2+0x90>)
 80005e2:	f001 fb77 	bl	8001cd4 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <GetkeyInput2+0x8c>)
 80005ec:	601a      	str	r2, [r3, #0]
	if (KeyReg0 == KeyReg1 && KeyReg1 == KeyReg2)
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <GetkeyInput2+0x88>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <GetkeyInput2+0x84>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d125      	bne.n	8000646 <GetkeyInput2+0x7e>
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <GetkeyInput2+0x84>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <GetkeyInput2+0x8c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d11f      	bne.n	8000646 <GetkeyInput2+0x7e>
	{
		if(KeyReg3 != KeyReg2)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <GetkeyInput2+0x94>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <GetkeyInput2+0x8c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	d00d      	beq.n	800062e <GetkeyInput2+0x66>
		{
			KeyReg3 = KeyReg2;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <GetkeyInput2+0x8c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a11      	ldr	r2, [pc, #68]	; (800065c <GetkeyInput2+0x94>)
 8000618:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == 0)
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <GetkeyInput2+0x8c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d111      	bne.n	8000646 <GetkeyInput2+0x7e>
			{
				SubKeyProcess();
 8000622:	f7ff ffc5 	bl	80005b0 <SubKeyProcess>
				Timerforkeypressed = 200;			 
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <GetkeyInput2+0x98>)
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	601a      	str	r2, [r3, #0]
				Timerforkeypressed = 200;						 
			}
		}
	}
	
}
 800062c:	e00b      	b.n	8000646 <GetkeyInput2+0x7e>
			Timerforkeypressed--;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <GetkeyInput2+0x98>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <GetkeyInput2+0x98>)
 8000636:	6013      	str	r3, [r2, #0]
			if (Timerforkeypressed == 0)
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <GetkeyInput2+0x98>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <GetkeyInput2+0x7e>
				Timerforkeypressed = 200;						 
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <GetkeyInput2+0x98>)
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000002c 	.word	0x2000002c
 8000650:	20000028 	.word	0x20000028
 8000654:	20000030 	.word	0x20000030
 8000658:	40011000 	.word	0x40011000
 800065c:	20000034 	.word	0x20000034
 8000660:	20000038 	.word	0x20000038

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08e      	sub	sp, #56	; 0x38
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f001 f847 	bl	80016fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 fda3 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 fe29 	bl	80012c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000676:	f000 fddb 	bl	8001230 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  
	HAL_TIM_Base_Start_IT(&htim2);
 800067a:	48b3      	ldr	r0, [pc, #716]	; (8000948 <main+0x2e4>)
 800067c:	f001 ffa0 	bl	80025c0 <HAL_TIM_Base_Start_IT>
	int tempvalue;
	int ledswitchingflag = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
	int mode = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
	int OnStartUp1 = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
	int OnStartUp2 = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
	int OnStartUp3 = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
	int OnStartUp4 = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
	int trafficlightred = 5;
 8000698:	2305      	movs	r3, #5
 800069a:	61bb      	str	r3, [r7, #24]
	int trafficlightyellow = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
	int trafficlightgreen = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	613b      	str	r3, [r7, #16]
	int status1 = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
	int status2 = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60bb      	str	r3, [r7, #8]
	int value7A = trafficlightred;
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	607b      	str	r3, [r7, #4]
	int value7B = trafficlightgreen;
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	603b      	str	r3, [r7, #0]
	sevenledsetA(value7A%10);
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4ba5      	ldr	r3, [pc, #660]	; (800094c <main+0x2e8>)
 80006b8:	fb83 1302 	smull	r1, r3, r3, r2
 80006bc:	1099      	asrs	r1, r3, #2
 80006be:	17d3      	asrs	r3, r2, #31
 80006c0:	1ac9      	subs	r1, r1, r3
 80006c2:	460b      	mov	r3, r1
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	1ad1      	subs	r1, r2, r3
 80006cc:	4608      	mov	r0, r1
 80006ce:	f7ff fd3d 	bl	800014c <sevenledsetA>
	sevenledsetB(value7B%10);
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	4b9d      	ldr	r3, [pc, #628]	; (800094c <main+0x2e8>)
 80006d6:	fb83 1302 	smull	r1, r3, r3, r2
 80006da:	1099      	asrs	r1, r3, #2
 80006dc:	17d3      	asrs	r3, r2, #31
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1ad1      	subs	r1, r2, r3
 80006ea:	4608      	mov	r0, r1
 80006ec:	f7ff fdde 	bl	80002ac <sevenledsetB>
	
	setTimer0(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f000 fe79 	bl	80013e8 <setTimer0>
	setTimer1(trafficlightred*100);
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fea0 	bl	8001444 <setTimer1>
	setTimer2(trafficlightgreen*100);
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	2264      	movs	r2, #100	; 0x64
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fec7 	bl	80014a0 <setTimer2>
	setTimer3(100);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f000 fef2 	bl	80014fc <setTimer3>
	setTimer4(100);
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	f000 ff1d 	bl	8001558 <setTimer4>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	488a      	ldr	r0, [pc, #552]	; (8000950 <main+0x2ec>)
 8000726:	f001 faec 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000730:	4887      	ldr	r0, [pc, #540]	; (8000950 <main+0x2ec>)
 8000732:	f001 fae6 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	4885      	ldr	r0, [pc, #532]	; (8000954 <main+0x2f0>)
 800073e:	f001 fae0 	bl	8001d02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000748:	4882      	ldr	r0, [pc, #520]	; (8000954 <main+0x2f0>)
 800074a:	f001 fada 	bl	8001d02 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (button0_trigger == 1)
 800074e:	4b82      	ldr	r3, [pc, #520]	; (8000958 <main+0x2f4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d11e      	bne.n	8000794 <main+0x130>
	{
		button0_trigger = 0;
 8000756:	4b80      	ldr	r3, [pc, #512]	; (8000958 <main+0x2f4>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
		mode++;
 800075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075e:	3301      	adds	r3, #1
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (mode > 4) mode = 1;
 8000762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000764:	2b04      	cmp	r3, #4
 8000766:	dd01      	ble.n	800076c <main+0x108>
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (mode == 2) OnStartUp2 = 1;
 800076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076e:	2b02      	cmp	r3, #2
 8000770:	d101      	bne.n	8000776 <main+0x112>
 8000772:	2301      	movs	r3, #1
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
		if (mode == 3) OnStartUp3 = 1;
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b03      	cmp	r3, #3
 800077a:	d101      	bne.n	8000780 <main+0x11c>
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
		if (mode == 4) OnStartUp4 = 1;
 8000780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000782:	2b04      	cmp	r3, #4
 8000784:	d101      	bne.n	800078a <main+0x126>
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
		if (mode == 1) OnStartUp1 = 1;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078c:	2b01      	cmp	r3, #1
 800078e:	d101      	bne.n	8000794 <main+0x130>
 8000790:	2301      	movs	r3, #1
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (mode == 1)
 8000794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000796:	2b01      	cmp	r3, #1
 8000798:	f040 825d 	bne.w	8000c56 <main+0x5f2>
	{
		if (OnStartUp1)
 800079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d056      	beq.n	8000850 <main+0x1ec>
		{
			OnStartUp1 = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
			status1 = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
			status2 = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60bb      	str	r3, [r7, #8]
			value7A = trafficlightred;
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	607b      	str	r3, [r7, #4]
			value7B = trafficlightgreen;
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	603b      	str	r3, [r7, #0]
			sevenledsetA(value7A%10);
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4b64      	ldr	r3, [pc, #400]	; (800094c <main+0x2e8>)
 80007ba:	fb83 1302 	smull	r1, r3, r3, r2
 80007be:	1099      	asrs	r1, r3, #2
 80007c0:	17d3      	asrs	r3, r2, #31
 80007c2:	1ac9      	subs	r1, r1, r3
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	1ad1      	subs	r1, r2, r3
 80007ce:	4608      	mov	r0, r1
 80007d0:	f7ff fcbc 	bl	800014c <sevenledsetA>
			sevenledsetB(value7B%10);	
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4b5d      	ldr	r3, [pc, #372]	; (800094c <main+0x2e8>)
 80007d8:	fb83 1302 	smull	r1, r3, r3, r2
 80007dc:	1099      	asrs	r1, r3, #2
 80007de:	17d3      	asrs	r3, r2, #31
 80007e0:	1ac9      	subs	r1, r1, r3
 80007e2:	460b      	mov	r3, r1
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	1ad1      	subs	r1, r2, r3
 80007ec:	4608      	mov	r0, r1
 80007ee:	f7ff fd5d 	bl	80002ac <sevenledsetB>
			
			setTimer0(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f000 fdf8 	bl	80013e8 <setTimer0>
			setTimer1(trafficlightred*100);
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	2264      	movs	r2, #100	; 0x64
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fe1f 	bl	8001444 <setTimer1>
			setTimer2(trafficlightgreen*100);
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	2264      	movs	r2, #100	; 0x64
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fe46 	bl	80014a0 <setTimer2>
			setTimer3(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f000 fe71 	bl	80014fc <setTimer3>
			setTimer4(100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f000 fe9c 	bl	8001558 <setTimer4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000826:	484a      	ldr	r0, [pc, #296]	; (8000950 <main+0x2ec>)
 8000828:	f001 fa6b 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4847      	ldr	r0, [pc, #284]	; (8000950 <main+0x2ec>)
 8000834:	f001 fa65 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4845      	ldr	r0, [pc, #276]	; (8000954 <main+0x2f0>)
 8000840:	f001 fa5f 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	4842      	ldr	r0, [pc, #264]	; (8000954 <main+0x2f0>)
 800084c:	f001 fa59 	bl	8001d02 <HAL_GPIO_WritePin>
		}
		if (trafficlightred == trafficlightgreen + trafficlightyellow)
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	429a      	cmp	r2, r3
 800085a:	d10b      	bne.n	8000874 <main+0x210>
		{
			if (timerflag0 == 1)
 800085c:	4b3f      	ldr	r3, [pc, #252]	; (800095c <main+0x2f8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d10c      	bne.n	800087e <main+0x21a>
			{
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000864:	2101      	movs	r1, #1
 8000866:	483a      	ldr	r0, [pc, #232]	; (8000950 <main+0x2ec>)
 8000868:	f001 fa63 	bl	8001d32 <HAL_GPIO_TogglePin>
				setTimer0(100);
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f000 fdbb 	bl	80013e8 <setTimer0>
 8000872:	e004      	b.n	800087e <main+0x21a>
			}
		}
		else 
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4835      	ldr	r0, [pc, #212]	; (8000950 <main+0x2ec>)
 800087a:	f001 fa42 	bl	8001d02 <HAL_GPIO_WritePin>
		}
		switch(status1)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d043      	beq.n	800090c <main+0x2a8>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b03      	cmp	r3, #3
 8000888:	dc6c      	bgt.n	8000964 <main+0x300>
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d003      	beq.n	8000898 <main+0x234>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d01d      	beq.n	80008d2 <main+0x26e>
 8000896:	e065      	b.n	8000964 <main+0x300>
		{
			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	2102      	movs	r1, #2
 800089c:	482c      	ldr	r0, [pc, #176]	; (8000950 <main+0x2ec>)
 800089e:	f001 fa30 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2104      	movs	r1, #4
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <main+0x2ec>)
 80008a8:	f001 fa2b 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2108      	movs	r1, #8
 80008b0:	4827      	ldr	r0, [pc, #156]	; (8000950 <main+0x2ec>)
 80008b2:	f001 fa26 	bl	8001d02 <HAL_GPIO_WritePin>
				if (timerflag1 == 1)
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <main+0x2fc>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d162      	bne.n	8000984 <main+0x320>
				{
					setTimer1(trafficlightgreen*100);
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	2264      	movs	r2, #100	; 0x64
 80008c2:	fb02 f303 	mul.w	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fdbc 	bl	8001444 <setTimer1>
					status1 = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
				}
				break;
 80008d0:	e058      	b.n	8000984 <main+0x320>
			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2102      	movs	r1, #2
 80008d6:	481e      	ldr	r0, [pc, #120]	; (8000950 <main+0x2ec>)
 80008d8:	f001 fa13 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2104      	movs	r1, #4
 80008e0:	481b      	ldr	r0, [pc, #108]	; (8000950 <main+0x2ec>)
 80008e2:	f001 fa0e 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2108      	movs	r1, #8
 80008ea:	4819      	ldr	r0, [pc, #100]	; (8000950 <main+0x2ec>)
 80008ec:	f001 fa09 	bl	8001d02 <HAL_GPIO_WritePin>
				if (timerflag1 == 1)
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <main+0x2fc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d147      	bne.n	8000988 <main+0x324>
				{
					setTimer1(trafficlightyellow*100);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2264      	movs	r2, #100	; 0x64
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fd9f 	bl	8001444 <setTimer1>
					status1 = 3;
 8000906:	2303      	movs	r3, #3
 8000908:	60fb      	str	r3, [r7, #12]
				}
				break;
 800090a:	e03d      	b.n	8000988 <main+0x324>
			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2102      	movs	r1, #2
 8000910:	480f      	ldr	r0, [pc, #60]	; (8000950 <main+0x2ec>)
 8000912:	f001 f9f6 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	2104      	movs	r1, #4
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <main+0x2ec>)
 800091c:	f001 f9f1 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2108      	movs	r1, #8
 8000924:	480a      	ldr	r0, [pc, #40]	; (8000950 <main+0x2ec>)
 8000926:	f001 f9ec 	bl	8001d02 <HAL_GPIO_WritePin>
				if (timerflag1 == 1)
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <main+0x2fc>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d12c      	bne.n	800098c <main+0x328>
				{
					setTimer1(trafficlightred*100);
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2264      	movs	r2, #100	; 0x64
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fd82 	bl	8001444 <setTimer1>
					status1 = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
				}
				break;
 8000944:	e022      	b.n	800098c <main+0x328>
 8000946:	bf00      	nop
 8000948:	20000074 	.word	0x20000074
 800094c:	66666667 	.word	0x66666667
 8000950:	40010800 	.word	0x40010800
 8000954:	40010c00 	.word	0x40010c00
 8000958:	20000064 	.word	0x20000064
 800095c:	200000c0 	.word	0x200000c0
 8000960:	200000c8 	.word	0x200000c8
			default:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	2102      	movs	r1, #2
 8000968:	4845      	ldr	r0, [pc, #276]	; (8000a80 <main+0x41c>)
 800096a:	f001 f9ca 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	2104      	movs	r1, #4
 8000972:	4843      	ldr	r0, [pc, #268]	; (8000a80 <main+0x41c>)
 8000974:	f001 f9c5 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	2108      	movs	r1, #8
 800097c:	4840      	ldr	r0, [pc, #256]	; (8000a80 <main+0x41c>)
 800097e:	f001 f9c0 	bl	8001d02 <HAL_GPIO_WritePin>
				break;
 8000982:	e004      	b.n	800098e <main+0x32a>
				break;
 8000984:	bf00      	nop
 8000986:	e002      	b.n	800098e <main+0x32a>
				break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <main+0x32a>
				break;
 800098c:	bf00      	nop
		}
		switch(status2)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b03      	cmp	r3, #3
 8000992:	d043      	beq.n	8000a1c <main+0x3b8>
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2b03      	cmp	r3, #3
 8000998:	dc5d      	bgt.n	8000a56 <main+0x3f2>
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d003      	beq.n	80009a8 <main+0x344>
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d01d      	beq.n	80009e2 <main+0x37e>
 80009a6:	e056      	b.n	8000a56 <main+0x3f2>
		{
			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	4834      	ldr	r0, [pc, #208]	; (8000a80 <main+0x41c>)
 80009ae:	f001 f9a8 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	4832      	ldr	r0, [pc, #200]	; (8000a80 <main+0x41c>)
 80009b8:	f001 f9a3 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	482f      	ldr	r0, [pc, #188]	; (8000a80 <main+0x41c>)
 80009c2:	f001 f99e 	bl	8001d02 <HAL_GPIO_WritePin>
				if (timerflag2 == 1)
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <main+0x420>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d153      	bne.n	8000a76 <main+0x412>
				{
					setTimer2(trafficlightgreen*100);
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fd62 	bl	80014a0 <setTimer2>
					status2 = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	60bb      	str	r3, [r7, #8]
				}
				break;
 80009e0:	e049      	b.n	8000a76 <main+0x412>
			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2110      	movs	r1, #16
 80009e6:	4826      	ldr	r0, [pc, #152]	; (8000a80 <main+0x41c>)
 80009e8:	f001 f98b 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2120      	movs	r1, #32
 80009f0:	4823      	ldr	r0, [pc, #140]	; (8000a80 <main+0x41c>)
 80009f2:	f001 f986 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	4821      	ldr	r0, [pc, #132]	; (8000a80 <main+0x41c>)
 80009fc:	f001 f981 	bl	8001d02 <HAL_GPIO_WritePin>
				if (timerflag2 == 1)
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <main+0x420>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d138      	bne.n	8000a7a <main+0x416>
				{
					setTimer2(trafficlightyellow*100);
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	2264      	movs	r2, #100	; 0x64
 8000a0c:	fb02 f303 	mul.w	r3, r2, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fd45 	bl	80014a0 <setTimer2>
					status2 = 3;
 8000a16:	2303      	movs	r3, #3
 8000a18:	60bb      	str	r3, [r7, #8]
				}
				break;
 8000a1a:	e02e      	b.n	8000a7a <main+0x416>
			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2110      	movs	r1, #16
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <main+0x41c>)
 8000a22:	f001 f96e 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <main+0x41c>)
 8000a2c:	f001 f969 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <main+0x41c>)
 8000a36:	f001 f964 	bl	8001d02 <HAL_GPIO_WritePin>
				if (timerflag2 == 1)
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <main+0x420>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d122      	bne.n	8000a88 <main+0x424>
				{
					setTimer2(trafficlightred*100);
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	fb02 f303 	mul.w	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fd28 	bl	80014a0 <setTimer2>
					status2 = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
				}
				break;
 8000a54:	e018      	b.n	8000a88 <main+0x424>
			default:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <main+0x41c>)
 8000a5c:	f001 f951 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2120      	movs	r1, #32
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <main+0x41c>)
 8000a66:	f001 f94c 	bl	8001d02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <main+0x41c>)
 8000a70:	f001 f947 	bl	8001d02 <HAL_GPIO_WritePin>
				break;
 8000a74:	e009      	b.n	8000a8a <main+0x426>
				break;
 8000a76:	bf00      	nop
 8000a78:	e007      	b.n	8000a8a <main+0x426>
				break;
 8000a7a:	bf00      	nop
 8000a7c:	e005      	b.n	8000a8a <main+0x426>
 8000a7e:	bf00      	nop
 8000a80:	40010800 	.word	0x40010800
 8000a84:	200000d0 	.word	0x200000d0
				break;
 8000a88:	bf00      	nop
		}
		if (timerflag3 == 1)
 8000a8a:	4bb8      	ldr	r3, [pc, #736]	; (8000d6c <main+0x708>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d16e      	bne.n	8000b70 <main+0x50c>
		{	
			value7A--;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
			if (value7A == 0)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d111      	bne.n	8000ac2 <main+0x45e>
			{
				sevenledsetA(value7A%10);
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4bb3      	ldr	r3, [pc, #716]	; (8000d70 <main+0x70c>)
 8000aa2:	fb83 1302 	smull	r1, r3, r3, r2
 8000aa6:	1099      	asrs	r1, r3, #2
 8000aa8:	17d3      	asrs	r3, r2, #31
 8000aaa:	1ac9      	subs	r1, r1, r3
 8000aac:	460b      	mov	r3, r1
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	1ad1      	subs	r1, r2, r3
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	f7ff fb48 	bl	800014c <sevenledsetA>
				setTimer3(20);
 8000abc:	2014      	movs	r0, #20
 8000abe:	f000 fd1d 	bl	80014fc <setTimer3>
			}
			if (value7A > 0)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dd11      	ble.n	8000aec <main+0x488>
			{
				sevenledsetA(value7A%10);
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4ba9      	ldr	r3, [pc, #676]	; (8000d70 <main+0x70c>)
 8000acc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ad0:	1099      	asrs	r1, r3, #2
 8000ad2:	17d3      	asrs	r3, r2, #31
 8000ad4:	1ac9      	subs	r1, r1, r3
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	440b      	add	r3, r1
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	1ad1      	subs	r1, r2, r3
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	f7ff fb33 	bl	800014c <sevenledsetA>
				setTimer3(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f000 fd08 	bl	80014fc <setTimer3>
			}
			if (value7A < 0)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da3e      	bge.n	8000b70 <main+0x50c>
			{
				if (status1 == 2) {value7A = trafficlightgreen; sevenledsetA(value7A%10);}
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d110      	bne.n	8000b1a <main+0x4b6>
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4b9c      	ldr	r3, [pc, #624]	; (8000d70 <main+0x70c>)
 8000b00:	fb83 1302 	smull	r1, r3, r3, r2
 8000b04:	1099      	asrs	r1, r3, #2
 8000b06:	17d3      	asrs	r3, r2, #31
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	1ad1      	subs	r1, r2, r3
 8000b14:	4608      	mov	r0, r1
 8000b16:	f7ff fb19 	bl	800014c <sevenledsetA>
				if (status1 == 3) {value7A = trafficlightyellow; sevenledsetA(value7A%10);}
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d110      	bne.n	8000b42 <main+0x4de>
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4b92      	ldr	r3, [pc, #584]	; (8000d70 <main+0x70c>)
 8000b28:	fb83 1302 	smull	r1, r3, r3, r2
 8000b2c:	1099      	asrs	r1, r3, #2
 8000b2e:	17d3      	asrs	r3, r2, #31
 8000b30:	1ac9      	subs	r1, r1, r3
 8000b32:	460b      	mov	r3, r1
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	440b      	add	r3, r1
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	1ad1      	subs	r1, r2, r3
 8000b3c:	4608      	mov	r0, r1
 8000b3e:	f7ff fb05 	bl	800014c <sevenledsetA>
				if (status1 == 1) {value7A = trafficlightred; sevenledsetA(value7A%10);}
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d110      	bne.n	8000b6a <main+0x506>
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <main+0x70c>)
 8000b50:	fb83 1302 	smull	r1, r3, r3, r2
 8000b54:	1099      	asrs	r1, r3, #2
 8000b56:	17d3      	asrs	r3, r2, #31
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	1ad1      	subs	r1, r2, r3
 8000b64:	4608      	mov	r0, r1
 8000b66:	f7ff faf1 	bl	800014c <sevenledsetA>
				setTimer3(80);
 8000b6a:	2050      	movs	r0, #80	; 0x50
 8000b6c:	f000 fcc6 	bl	80014fc <setTimer3>
			}
		}	
		if (timerflag4 == 1)
 8000b70:	4b80      	ldr	r3, [pc, #512]	; (8000d74 <main+0x710>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d16e      	bne.n	8000c56 <main+0x5f2>
		{	
			value7B--;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	603b      	str	r3, [r7, #0]
			if (value7B == 0)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d111      	bne.n	8000ba8 <main+0x544>
			{
				sevenledsetB(value7B%10);
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4b7a      	ldr	r3, [pc, #488]	; (8000d70 <main+0x70c>)
 8000b88:	fb83 1302 	smull	r1, r3, r3, r2
 8000b8c:	1099      	asrs	r1, r3, #2
 8000b8e:	17d3      	asrs	r3, r2, #31
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	460b      	mov	r3, r1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	1ad1      	subs	r1, r2, r3
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	f7ff fb85 	bl	80002ac <sevenledsetB>
				setTimer4(20);
 8000ba2:	2014      	movs	r0, #20
 8000ba4:	f000 fcd8 	bl	8001558 <setTimer4>
			}
			if (value7B > 0)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	dd11      	ble.n	8000bd2 <main+0x56e>
			{
				sevenledsetB(value7B%10);
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4b6f      	ldr	r3, [pc, #444]	; (8000d70 <main+0x70c>)
 8000bb2:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb6:	1099      	asrs	r1, r3, #2
 8000bb8:	17d3      	asrs	r3, r2, #31
 8000bba:	1ac9      	subs	r1, r1, r3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	1ad1      	subs	r1, r2, r3
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	f7ff fb70 	bl	80002ac <sevenledsetB>
				setTimer4(100);
 8000bcc:	2064      	movs	r0, #100	; 0x64
 8000bce:	f000 fcc3 	bl	8001558 <setTimer4>
			}
			if (value7B < 0)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da3e      	bge.n	8000c56 <main+0x5f2>
			{
				if (status2 == 2) {value7B = trafficlightgreen; sevenledsetB(value7B%10);}
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d110      	bne.n	8000c00 <main+0x59c>
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <main+0x70c>)
 8000be6:	fb83 1302 	smull	r1, r3, r3, r2
 8000bea:	1099      	asrs	r1, r3, #2
 8000bec:	17d3      	asrs	r3, r2, #31
 8000bee:	1ac9      	subs	r1, r1, r3
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	1ad1      	subs	r1, r2, r3
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	f7ff fb56 	bl	80002ac <sevenledsetB>
				if (status2 == 3) {value7B = trafficlightyellow; sevenledsetB(value7B%10);}
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d110      	bne.n	8000c28 <main+0x5c4>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4b58      	ldr	r3, [pc, #352]	; (8000d70 <main+0x70c>)
 8000c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c12:	1099      	asrs	r1, r3, #2
 8000c14:	17d3      	asrs	r3, r2, #31
 8000c16:	1ac9      	subs	r1, r1, r3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad1      	subs	r1, r2, r3
 8000c22:	4608      	mov	r0, r1
 8000c24:	f7ff fb42 	bl	80002ac <sevenledsetB>
				if (status2 == 1) {value7B = trafficlightred; sevenledsetB(value7B%10);}
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d110      	bne.n	8000c50 <main+0x5ec>
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <main+0x70c>)
 8000c36:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3a:	1099      	asrs	r1, r3, #2
 8000c3c:	17d3      	asrs	r3, r2, #31
 8000c3e:	1ac9      	subs	r1, r1, r3
 8000c40:	460b      	mov	r3, r1
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	1ad1      	subs	r1, r2, r3
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	f7ff fb2e 	bl	80002ac <sevenledsetB>
				setTimer4(80);
 8000c50:	2050      	movs	r0, #80	; 0x50
 8000c52:	f000 fc81 	bl	8001558 <setTimer4>
			}
		}
	}
	if (mode == 2)
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	f040 80de 	bne.w	8000e1a <main+0x7b6>
	{
		if (OnStartUp2)
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d05b      	beq.n	8000d1c <main+0x6b8>
		{
			OnStartUp2 = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4842      	ldr	r0, [pc, #264]	; (8000d78 <main+0x714>)
 8000c6e:	f001 f848 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4840      	ldr	r0, [pc, #256]	; (8000d78 <main+0x714>)
 8000c78:	f001 f843 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2104      	movs	r1, #4
 8000c80:	483d      	ldr	r0, [pc, #244]	; (8000d78 <main+0x714>)
 8000c82:	f001 f83e 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2108      	movs	r1, #8
 8000c8a:	483b      	ldr	r0, [pc, #236]	; (8000d78 <main+0x714>)
 8000c8c:	f001 f839 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4838      	ldr	r0, [pc, #224]	; (8000d78 <main+0x714>)
 8000c96:	f001 f834 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4836      	ldr	r0, [pc, #216]	; (8000d78 <main+0x714>)
 8000ca0:	f001 f82f 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	4833      	ldr	r0, [pc, #204]	; (8000d78 <main+0x714>)
 8000caa:	f001 f82a 	bl	8001d02 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb4:	4830      	ldr	r0, [pc, #192]	; (8000d78 <main+0x714>)
 8000cb6:	f001 f824 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc0:	482d      	ldr	r0, [pc, #180]	; (8000d78 <main+0x714>)
 8000cc2:	f001 f81e 	bl	8001d02 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ccc:	482b      	ldr	r0, [pc, #172]	; (8000d7c <main+0x718>)
 8000cce:	f001 f818 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd8:	4828      	ldr	r0, [pc, #160]	; (8000d7c <main+0x718>)
 8000cda:	f001 f812 	bl	8001d02 <HAL_GPIO_WritePin>
			
			tempvalue = trafficlightred;
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
			sevenledsetA(tempvalue%10);
 8000ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <main+0x70c>)
 8000ce6:	fb83 1302 	smull	r1, r3, r3, r2
 8000cea:	1099      	asrs	r1, r3, #2
 8000cec:	17d3      	asrs	r3, r2, #31
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	1ad1      	subs	r1, r2, r3
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	f7ff fa26 	bl	800014c <sevenledsetA>
			ledswitchingflag = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
			sevenledsetB(2);
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fad1 	bl	80002ac <sevenledsetB>
			setTimer0(50);
 8000d0a:	2032      	movs	r0, #50	; 0x32
 8000d0c:	f000 fb6c 	bl	80013e8 <setTimer0>
			setTimer1(25);
 8000d10:	2019      	movs	r0, #25
 8000d12:	f000 fb97 	bl	8001444 <setTimer1>
			setTimer2(50);
 8000d16:	2032      	movs	r0, #50	; 0x32
 8000d18:	f000 fbc2 	bl	80014a0 <setTimer2>
		}
		if (timerflag0 == 1)
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <main+0x71c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10e      	bne.n	8000d42 <main+0x6de>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000d24:	2101      	movs	r1, #1
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <main+0x714>)
 8000d28:	f001 f803 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <main+0x714>)
 8000d30:	f000 ffff 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000d34:	2110      	movs	r1, #16
 8000d36:	4810      	ldr	r0, [pc, #64]	; (8000d78 <main+0x714>)
 8000d38:	f000 fffb 	bl	8001d32 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			setTimer0(50);
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f000 fb53 	bl	80013e8 <setTimer0>
		}
		if (timerflag1 == 1)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <main+0x720>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d13c      	bne.n	8000dc4 <main+0x760>
		{
			if (ledswitchingflag == 0) 
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d11b      	bne.n	8000d88 <main+0x724>
			{
				ledswitchingflag = 1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue/10);
 8000d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <main+0x70c>)
 8000d58:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5c:	1092      	asrs	r2, r2, #2
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff f9f2 	bl	800014c <sevenledsetA>
 8000d68:	e01f      	b.n	8000daa <main+0x746>
 8000d6a:	bf00      	nop
 8000d6c:	200000d8 	.word	0x200000d8
 8000d70:	66666667 	.word	0x66666667
 8000d74:	200000e0 	.word	0x200000e0
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	200000c0 	.word	0x200000c0
 8000d84:	200000c8 	.word	0x200000c8
			}
			else
			{
				ledswitchingflag = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue%10);
 8000d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d8e:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <main+0x8cc>)
 8000d90:	fb83 1302 	smull	r1, r3, r3, r2
 8000d94:	1099      	asrs	r1, r3, #2
 8000d96:	17d3      	asrs	r3, r2, #31
 8000d98:	1ac9      	subs	r1, r1, r3
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	1ad1      	subs	r1, r2, r3
 8000da4:	4608      	mov	r0, r1
 8000da6:	f7ff f9d1 	bl	800014c <sevenledsetA>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8000daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dae:	4861      	ldr	r0, [pc, #388]	; (8000f34 <main+0x8d0>)
 8000db0:	f000 ffbf 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db8:	485e      	ldr	r0, [pc, #376]	; (8000f34 <main+0x8d0>)
 8000dba:	f000 ffba 	bl	8001d32 <HAL_GPIO_TogglePin>
			setTimer1(25);
 8000dbe:	2019      	movs	r0, #25
 8000dc0:	f000 fb40 	bl	8001444 <setTimer1>
		}
		if (button1_trigger == 1)
 8000dc4:	4b5c      	ldr	r3, [pc, #368]	; (8000f38 <main+0x8d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d10a      	bne.n	8000de2 <main+0x77e>
		{
			button1_trigger = 0;
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <main+0x8d4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
			tempvalue++;
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
			if (tempvalue >= 100)
 8000dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dda:	2b63      	cmp	r3, #99	; 0x63
 8000ddc:	dd01      	ble.n	8000de2 <main+0x77e>
			{
				tempvalue = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}
		if (button1_trigger_long == 1)
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <main+0x8d8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10e      	bne.n	8000e08 <main+0x7a4>
		{
			if (timerflag2 == 1)
 8000dea:	4b55      	ldr	r3, [pc, #340]	; (8000f40 <main+0x8dc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d10a      	bne.n	8000e08 <main+0x7a4>
			{
				tempvalue++;
 8000df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df4:	3301      	adds	r3, #1
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
				if (tempvalue >= 100)
 8000df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfa:	2b63      	cmp	r3, #99	; 0x63
 8000dfc:	dd01      	ble.n	8000e02 <main+0x79e>
				{
					tempvalue = 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
				}
				setTimer2(50);
 8000e02:	2032      	movs	r0, #50	; 0x32
 8000e04:	f000 fb4c 	bl	80014a0 <setTimer2>
			}
		}
		if (button2_trigger == 1)
 8000e08:	4b4e      	ldr	r3, [pc, #312]	; (8000f44 <main+0x8e0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d104      	bne.n	8000e1a <main+0x7b6>
		{
			button2_trigger = 0;
 8000e10:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <main+0x8e0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
			trafficlightred = tempvalue;
 8000e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e18:	61bb      	str	r3, [r7, #24]
		}
	}
	if (mode == 3)
 8000e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	f040 80e2 	bne.w	8000fe6 <main+0x982>
	{
		if (OnStartUp3)
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d05b      	beq.n	8000ee0 <main+0x87c>
		{
			OnStartUp3 = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4840      	ldr	r0, [pc, #256]	; (8000f34 <main+0x8d0>)
 8000e32:	f000 ff66 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2102      	movs	r1, #2
 8000e3a:	483e      	ldr	r0, [pc, #248]	; (8000f34 <main+0x8d0>)
 8000e3c:	f000 ff61 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2104      	movs	r1, #4
 8000e44:	483b      	ldr	r0, [pc, #236]	; (8000f34 <main+0x8d0>)
 8000e46:	f000 ff5c 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4839      	ldr	r0, [pc, #228]	; (8000f34 <main+0x8d0>)
 8000e50:	f000 ff57 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2110      	movs	r1, #16
 8000e58:	4836      	ldr	r0, [pc, #216]	; (8000f34 <main+0x8d0>)
 8000e5a:	f000 ff52 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2120      	movs	r1, #32
 8000e62:	4834      	ldr	r0, [pc, #208]	; (8000f34 <main+0x8d0>)
 8000e64:	f000 ff4d 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2140      	movs	r1, #64	; 0x40
 8000e6c:	4831      	ldr	r0, [pc, #196]	; (8000f34 <main+0x8d0>)
 8000e6e:	f000 ff48 	bl	8001d02 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e78:	482e      	ldr	r0, [pc, #184]	; (8000f34 <main+0x8d0>)
 8000e7a:	f000 ff42 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e84:	482b      	ldr	r0, [pc, #172]	; (8000f34 <main+0x8d0>)
 8000e86:	f000 ff3c 	bl	8001d02 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e90:	482d      	ldr	r0, [pc, #180]	; (8000f48 <main+0x8e4>)
 8000e92:	f000 ff36 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9c:	482a      	ldr	r0, [pc, #168]	; (8000f48 <main+0x8e4>)
 8000e9e:	f000 ff30 	bl	8001d02 <HAL_GPIO_WritePin>
			
			tempvalue = trafficlightyellow;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
			sevenledsetA(tempvalue%10);
 8000ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <main+0x8cc>)
 8000eaa:	fb83 1302 	smull	r1, r3, r3, r2
 8000eae:	1099      	asrs	r1, r3, #2
 8000eb0:	17d3      	asrs	r3, r2, #31
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	1ad1      	subs	r1, r2, r3
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	f7ff f944 	bl	800014c <sevenledsetA>
			ledswitchingflag = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
			sevenledsetB(3);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f7ff f9ef 	bl	80002ac <sevenledsetB>
			setTimer0(50);
 8000ece:	2032      	movs	r0, #50	; 0x32
 8000ed0:	f000 fa8a 	bl	80013e8 <setTimer0>
			setTimer1(25);
 8000ed4:	2019      	movs	r0, #25
 8000ed6:	f000 fab5 	bl	8001444 <setTimer1>
			setTimer2(50);
 8000eda:	2032      	movs	r0, #50	; 0x32
 8000edc:	f000 fae0 	bl	80014a0 <setTimer2>
		}
		if (timerflag0 == 1)
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <main+0x8e8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10e      	bne.n	8000f06 <main+0x8a2>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <main+0x8d0>)
 8000eec:	f000 ff21 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	4810      	ldr	r0, [pc, #64]	; (8000f34 <main+0x8d0>)
 8000ef4:	f000 ff1d 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ef8:	2120      	movs	r1, #32
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <main+0x8d0>)
 8000efc:	f000 ff19 	bl	8001d32 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			setTimer0(50);
 8000f00:	2032      	movs	r0, #50	; 0x32
 8000f02:	f000 fa71 	bl	80013e8 <setTimer0>
		}
		if (timerflag1 == 1)
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <main+0x8ec>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d140      	bne.n	8000f90 <main+0x92c>
		{
			if (ledswitchingflag == 0) 
 8000f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11f      	bne.n	8000f54 <main+0x8f0>
			{
				ledswitchingflag = 1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue/10);
 8000f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <main+0x8cc>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	1092      	asrs	r2, r2, #2
 8000f22:	17db      	asrs	r3, r3, #31
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f910 	bl	800014c <sevenledsetA>
 8000f2c:	e023      	b.n	8000f76 <main+0x912>
 8000f2e:	bf00      	nop
 8000f30:	66666667 	.word	0x66666667
 8000f34:	40010800 	.word	0x40010800
 8000f38:	20000068 	.word	0x20000068
 8000f3c:	2000006c 	.word	0x2000006c
 8000f40:	200000d0 	.word	0x200000d0
 8000f44:	20000070 	.word	0x20000070
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	200000c0 	.word	0x200000c0
 8000f50:	200000c8 	.word	0x200000c8
			}
			else
			{
				ledswitchingflag = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue%10);
 8000f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f5a:	4b8e      	ldr	r3, [pc, #568]	; (8001194 <main+0xb30>)
 8000f5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f60:	1099      	asrs	r1, r3, #2
 8000f62:	17d3      	asrs	r3, r2, #31
 8000f64:	1ac9      	subs	r1, r1, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	1ad1      	subs	r1, r2, r3
 8000f70:	4608      	mov	r0, r1
 8000f72:	f7ff f8eb 	bl	800014c <sevenledsetA>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8000f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7a:	4887      	ldr	r0, [pc, #540]	; (8001198 <main+0xb34>)
 8000f7c:	f000 fed9 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f84:	4884      	ldr	r0, [pc, #528]	; (8001198 <main+0xb34>)
 8000f86:	f000 fed4 	bl	8001d32 <HAL_GPIO_TogglePin>
			setTimer1(25);
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 fa5a 	bl	8001444 <setTimer1>
		}
		if (button1_trigger == 1)
 8000f90:	4b82      	ldr	r3, [pc, #520]	; (800119c <main+0xb38>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10a      	bne.n	8000fae <main+0x94a>
		{
			button1_trigger = 0;
 8000f98:	4b80      	ldr	r3, [pc, #512]	; (800119c <main+0xb38>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
			tempvalue++;
 8000f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
			if (tempvalue >= 100)
 8000fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa6:	2b63      	cmp	r3, #99	; 0x63
 8000fa8:	dd01      	ble.n	8000fae <main+0x94a>
			{
				tempvalue = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}
		if (button1_trigger_long == 1)
 8000fae:	4b7c      	ldr	r3, [pc, #496]	; (80011a0 <main+0xb3c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d10e      	bne.n	8000fd4 <main+0x970>
		{
			if (timerflag2 == 1)
 8000fb6:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <main+0xb40>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d10a      	bne.n	8000fd4 <main+0x970>
			{
				tempvalue++;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
				if (tempvalue >= 100)
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	2b63      	cmp	r3, #99	; 0x63
 8000fc8:	dd01      	ble.n	8000fce <main+0x96a>
				{
					tempvalue = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
				}
				setTimer2(50);
 8000fce:	2032      	movs	r0, #50	; 0x32
 8000fd0:	f000 fa66 	bl	80014a0 <setTimer2>
			}
		}
		if (button2_trigger == 1)
 8000fd4:	4b74      	ldr	r3, [pc, #464]	; (80011a8 <main+0xb44>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d104      	bne.n	8000fe6 <main+0x982>
		{
			button2_trigger = 0;
 8000fdc:	4b72      	ldr	r3, [pc, #456]	; (80011a8 <main+0xb44>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
			trafficlightyellow = tempvalue;
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe4:	617b      	str	r3, [r7, #20]
		}
	}
	if (mode == 4)
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	f47f abb0 	bne.w	800074e <main+0xea>
	{
		if (OnStartUp4)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d05b      	beq.n	80010ac <main+0xa48>
		{
			OnStartUp4 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4866      	ldr	r0, [pc, #408]	; (8001198 <main+0xb34>)
 8000ffe:	f000 fe80 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2102      	movs	r1, #2
 8001006:	4864      	ldr	r0, [pc, #400]	; (8001198 <main+0xb34>)
 8001008:	f000 fe7b 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2104      	movs	r1, #4
 8001010:	4861      	ldr	r0, [pc, #388]	; (8001198 <main+0xb34>)
 8001012:	f000 fe76 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001016:	2201      	movs	r2, #1
 8001018:	2108      	movs	r1, #8
 800101a:	485f      	ldr	r0, [pc, #380]	; (8001198 <main+0xb34>)
 800101c:	f000 fe71 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2110      	movs	r1, #16
 8001024:	485c      	ldr	r0, [pc, #368]	; (8001198 <main+0xb34>)
 8001026:	f000 fe6c 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2120      	movs	r1, #32
 800102e:	485a      	ldr	r0, [pc, #360]	; (8001198 <main+0xb34>)
 8001030:	f000 fe67 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4857      	ldr	r0, [pc, #348]	; (8001198 <main+0xb34>)
 800103a:	f000 fe62 	bl	8001d02 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 1);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001044:	4854      	ldr	r0, [pc, #336]	; (8001198 <main+0xb34>)
 8001046:	f000 fe5c 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001050:	4851      	ldr	r0, [pc, #324]	; (8001198 <main+0xb34>)
 8001052:	f000 fe56 	bl	8001d02 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105c:	4853      	ldr	r0, [pc, #332]	; (80011ac <main+0xb48>)
 800105e:	f000 fe50 	bl	8001d02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001068:	4850      	ldr	r0, [pc, #320]	; (80011ac <main+0xb48>)
 800106a:	f000 fe4a 	bl	8001d02 <HAL_GPIO_WritePin>
			
			tempvalue = trafficlightgreen;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
			sevenledsetA(tempvalue%10);
 8001072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001074:	4b47      	ldr	r3, [pc, #284]	; (8001194 <main+0xb30>)
 8001076:	fb83 1302 	smull	r1, r3, r3, r2
 800107a:	1099      	asrs	r1, r3, #2
 800107c:	17d3      	asrs	r3, r2, #31
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	460b      	mov	r3, r1
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	1ad1      	subs	r1, r2, r3
 800108a:	4608      	mov	r0, r1
 800108c:	f7ff f85e 	bl	800014c <sevenledsetA>
			ledswitchingflag = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
			sevenledsetB(4);
 8001094:	2004      	movs	r0, #4
 8001096:	f7ff f909 	bl	80002ac <sevenledsetB>
			setTimer0(50);
 800109a:	2032      	movs	r0, #50	; 0x32
 800109c:	f000 f9a4 	bl	80013e8 <setTimer0>
			setTimer1(25);
 80010a0:	2019      	movs	r0, #25
 80010a2:	f000 f9cf 	bl	8001444 <setTimer1>
			setTimer2(50);
 80010a6:	2032      	movs	r0, #50	; 0x32
 80010a8:	f000 f9fa 	bl	80014a0 <setTimer2>
		}
		if (timerflag0 == 1)
 80010ac:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <main+0xb4c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10e      	bne.n	80010d2 <main+0xa6e>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80010b4:	2101      	movs	r1, #1
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <main+0xb34>)
 80010b8:	f000 fe3b 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80010bc:	2108      	movs	r1, #8
 80010be:	4836      	ldr	r0, [pc, #216]	; (8001198 <main+0xb34>)
 80010c0:	f000 fe37 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80010c4:	2140      	movs	r1, #64	; 0x40
 80010c6:	4834      	ldr	r0, [pc, #208]	; (8001198 <main+0xb34>)
 80010c8:	f000 fe33 	bl	8001d32 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			setTimer0(50);
 80010cc:	2032      	movs	r0, #50	; 0x32
 80010ce:	f000 f98b 	bl	80013e8 <setTimer0>
		}
		if (timerflag1 == 1)
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <main+0xb50>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d12d      	bne.n	8001136 <main+0xad2>
		{
			if (ledswitchingflag == 0) 
 80010da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10c      	bne.n	80010fa <main+0xa96>
			{
				ledswitchingflag = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue/10);
 80010e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e6:	4a2b      	ldr	r2, [pc, #172]	; (8001194 <main+0xb30>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1092      	asrs	r2, r2, #2
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f82a 	bl	800014c <sevenledsetA>
 80010f8:	e010      	b.n	800111c <main+0xab8>
			}
			else
			{
				ledswitchingflag = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue%10);
 80010fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <main+0xb30>)
 8001102:	fb83 1302 	smull	r1, r3, r3, r2
 8001106:	1099      	asrs	r1, r3, #2
 8001108:	17d3      	asrs	r3, r2, #31
 800110a:	1ac9      	subs	r1, r1, r3
 800110c:	460b      	mov	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	1ad1      	subs	r1, r2, r3
 8001116:	4608      	mov	r0, r1
 8001118:	f7ff f818 	bl	800014c <sevenledsetA>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 800111c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <main+0xb34>)
 8001122:	f000 fe06 	bl	8001d32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <main+0xb34>)
 800112c:	f000 fe01 	bl	8001d32 <HAL_GPIO_TogglePin>
			setTimer1(25);
 8001130:	2019      	movs	r0, #25
 8001132:	f000 f987 	bl	8001444 <setTimer1>
		}
		if (button1_trigger == 1)
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <main+0xb38>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10a      	bne.n	8001154 <main+0xaf0>
		{
			button1_trigger = 0;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <main+0xb38>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
			tempvalue++;
 8001144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001146:	3301      	adds	r3, #1
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
			if (tempvalue >= 100)
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	2b63      	cmp	r3, #99	; 0x63
 800114e:	dd01      	ble.n	8001154 <main+0xaf0>
			{
				tempvalue = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}
		if (button1_trigger_long == 1)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <main+0xb3c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10e      	bne.n	800117a <main+0xb16>
		{
			if (timerflag2 == 1)
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <main+0xb40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d10a      	bne.n	800117a <main+0xb16>
			{
				tempvalue++;
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	3301      	adds	r3, #1
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
				if (tempvalue >= 100)
 800116a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116c:	2b63      	cmp	r3, #99	; 0x63
 800116e:	dd01      	ble.n	8001174 <main+0xb10>
				{
					tempvalue = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
				}
				setTimer2(50);
 8001174:	2032      	movs	r0, #50	; 0x32
 8001176:	f000 f993 	bl	80014a0 <setTimer2>
			}
		}
		if (button2_trigger == 1)
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <main+0xb44>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	f47f aae5 	bne.w	800074e <main+0xea>
		{
			button2_trigger = 0;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <main+0xb44>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
			trafficlightgreen = tempvalue;
 800118a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118c:	613b      	str	r3, [r7, #16]
	if (button0_trigger == 1)
 800118e:	f7ff bade 	b.w	800074e <main+0xea>
 8001192:	bf00      	nop
 8001194:	66666667 	.word	0x66666667
 8001198:	40010800 	.word	0x40010800
 800119c:	20000068 	.word	0x20000068
 80011a0:	2000006c 	.word	0x2000006c
 80011a4:	200000d0 	.word	0x200000d0
 80011a8:	20000070 	.word	0x20000070
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	200000c0 	.word	0x200000c0
 80011b4:	200000c8 	.word	0x200000c8

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2228      	movs	r2, #40	; 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fd92 	bl	8002cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2310      	movs	r3, #16
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fdb8 	bl	8001d64 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011fa:	f000 f8ef 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f826 	bl	8002268 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001222:	f000 f8db 	bl	80013dc <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3740      	adds	r7, #64	; 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_TIM2_Init+0x94>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001256:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800125a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001264:	2209      	movs	r2, #9
 8001266:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_TIM2_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001276:	f001 f953 	bl	8002520 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001280:	f000 f8ac 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001292:	f001 fae9 	bl	8002868 <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800129c:	f000 f89e 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_TIM2_Init+0x94>)
 80012ae:	f001 fcb5 	bl	8002c1c <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012b8:	f000 f890 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000074 	.word	0x20000074

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <MX_GPIO_Init+0xd4>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a2e      	ldr	r2, [pc, #184]	; (800139c <MX_GPIO_Init+0xd4>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <MX_GPIO_Init+0xd4>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <MX_GPIO_Init+0xd4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <MX_GPIO_Init+0xd4>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_GPIO_Init+0xd4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_GPIO_Init+0xd4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <MX_GPIO_Init+0xd4>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_GPIO_Init+0xd4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001324:	2200      	movs	r2, #0
 8001326:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800132a:	481d      	ldr	r0, [pc, #116]	; (80013a0 <MX_GPIO_Init+0xd8>)
 800132c:	f000 fce9 	bl	8001d02 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001330:	2200      	movs	r2, #0
 8001332:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001336:	481b      	ldr	r0, [pc, #108]	; (80013a4 <MX_GPIO_Init+0xdc>)
 8001338:	f000 fce3 	bl	8001d02 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800133c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MX_GPIO_Init+0xe0>)
 8001352:	f000 fb43 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_GPIO_Init+0xd8>)
 8001370:	f000 fb34 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001374:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001378:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2302      	movs	r3, #2
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_GPIO_Init+0xdc>)
 800138e:	f000 fb25 	bl	80019dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40011000 	.word	0x40011000

080013ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	runTimer0();
 80013b4:	f000 f82c 	bl	8001410 <runTimer0>
	runTimer1();
 80013b8:	f000 f858 	bl	800146c <runTimer1>
	runTimer2();
 80013bc:	f000 f884 	bl	80014c8 <runTimer2>
	runTimer3();
 80013c0:	f000 f8b0 	bl	8001524 <runTimer3>
	runTimer4();
 80013c4:	f000 f8dc 	bl	8001580 <runTimer4>
	GetkeyInput0();
 80013c8:	f7ff f82c 	bl	8000424 <GetkeyInput0>
	GetkeyInput1();
 80013cc:	f7ff f890 	bl	80004f0 <GetkeyInput1>
	GetkeyInput2();
 80013d0:	f7ff f8fa 	bl	80005c8 <GetkeyInput2>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <setTimer0>:
#include "softwaretimer.h"
int timercounter0 = 0;
int timerflag0 = 0;

void setTimer0(int duration)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	timercounter0 = duration;
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <setTimer0+0x20>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
	timerflag0 = 0;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <setTimer0+0x24>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200000bc 	.word	0x200000bc
 800140c:	200000c0 	.word	0x200000c0

08001410 <runTimer0>:

void runTimer0()
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	if (timercounter0 > 0)
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <runTimer0+0x2c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dd0b      	ble.n	8001434 <runTimer0+0x24>
	{
		timercounter0--;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <runTimer0+0x2c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <runTimer0+0x2c>)
 8001424:	6013      	str	r3, [r2, #0]
		if (timercounter0 <= 0)
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <runTimer0+0x2c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dc02      	bgt.n	8001434 <runTimer0+0x24>
		{
			timerflag0 = 1;
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <runTimer0+0x30>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	200000bc 	.word	0x200000bc
 8001440:	200000c0 	.word	0x200000c0

08001444 <setTimer1>:

int timercounter1 = 0;
int timerflag1 = 0;

void setTimer1(int duration)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	timercounter1 = duration;
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <setTimer1+0x20>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
	timerflag1 = 0;
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <setTimer1+0x24>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200000c4 	.word	0x200000c4
 8001468:	200000c8 	.word	0x200000c8

0800146c <runTimer1>:

void runTimer1()
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	if (timercounter1 > 0)
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <runTimer1+0x2c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	dd0b      	ble.n	8001490 <runTimer1+0x24>
	{
		timercounter1--;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <runTimer1+0x2c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	4a06      	ldr	r2, [pc, #24]	; (8001498 <runTimer1+0x2c>)
 8001480:	6013      	str	r3, [r2, #0]
		if (timercounter1 <= 0)
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <runTimer1+0x2c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	dc02      	bgt.n	8001490 <runTimer1+0x24>
		{
			timerflag1 = 1;
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <runTimer1+0x30>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	200000c4 	.word	0x200000c4
 800149c:	200000c8 	.word	0x200000c8

080014a0 <setTimer2>:

int timercounter2 = 0;
int timerflag2 = 0;

void setTimer2(int duration)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	timercounter2 = duration;
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <setTimer2+0x20>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
	timerflag2 = 0;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <setTimer2+0x24>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200000cc 	.word	0x200000cc
 80014c4:	200000d0 	.word	0x200000d0

080014c8 <runTimer2>:

void runTimer2()
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	if (timercounter2 > 0)
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <runTimer2+0x2c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dd0b      	ble.n	80014ec <runTimer2+0x24>
	{
		timercounter2--;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <runTimer2+0x2c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <runTimer2+0x2c>)
 80014dc:	6013      	str	r3, [r2, #0]
		if (timercounter2 <= 0)
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <runTimer2+0x2c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	dc02      	bgt.n	80014ec <runTimer2+0x24>
		{
			timerflag2 = 1;
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <runTimer2+0x30>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	200000cc 	.word	0x200000cc
 80014f8:	200000d0 	.word	0x200000d0

080014fc <setTimer3>:

int timercounter3 = 0;
int timerflag3 = 0;

void setTimer3(int duration)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	timercounter3 = duration;
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <setTimer3+0x20>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
	timerflag3 = 0;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <setTimer3+0x24>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200000d4 	.word	0x200000d4
 8001520:	200000d8 	.word	0x200000d8

08001524 <runTimer3>:

void runTimer3()
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	if (timercounter3 > 0)
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <runTimer3+0x2c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	dd0b      	ble.n	8001548 <runTimer3+0x24>
	{
		timercounter3--;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <runTimer3+0x2c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3b01      	subs	r3, #1
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <runTimer3+0x2c>)
 8001538:	6013      	str	r3, [r2, #0]
		if (timercounter3 <= 0)
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <runTimer3+0x2c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	dc02      	bgt.n	8001548 <runTimer3+0x24>
		{
			timerflag3 = 1;
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <runTimer3+0x30>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	200000d4 	.word	0x200000d4
 8001554:	200000d8 	.word	0x200000d8

08001558 <setTimer4>:

int timercounter4 = 0;
int timerflag4 = 0;

void setTimer4(int duration)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	timercounter4 = duration;
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <setTimer4+0x20>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
	timerflag4 = 0;
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <setTimer4+0x24>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200000dc 	.word	0x200000dc
 800157c:	200000e0 	.word	0x200000e0

08001580 <runTimer4>:

void runTimer4()
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
	if (timercounter4 > 0)
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <runTimer4+0x2c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd0b      	ble.n	80015a4 <runTimer4+0x24>
	{
		timercounter4--;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <runTimer4+0x2c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	4a06      	ldr	r2, [pc, #24]	; (80015ac <runTimer4+0x2c>)
 8001594:	6013      	str	r3, [r2, #0]
		if (timercounter4 <= 0)
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <runTimer4+0x2c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dc02      	bgt.n	80015a4 <runTimer4+0x24>
		{
			timerflag4 = 1;
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <runTimer4+0x30>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
		}
	}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	200000dc 	.word	0x200000dc
 80015b0:	200000e0 	.word	0x200000e0

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_MspInit+0x40>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_MspInit+0x40>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_MspInit+0x40>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_MspInit+0x40>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_MspInit+0x40>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_MspInit+0x40>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001608:	d113      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_TIM_Base_MspInit+0x44>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_TIM_Base_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_TIM_Base_MspInit+0x44>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	201c      	movs	r0, #28
 8001628:	f000 f9a1 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162c:	201c      	movs	r0, #28
 800162e:	f000 f9ba 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001686:	f000 f87f 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM2_IRQHandler+0x10>)
 8001696:	f000 ffdf 	bl	8002658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000074 	.word	0x20000074

080016a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff fff8 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016b6:	490c      	ldr	r1, [pc, #48]	; (80016e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016cc:	4c09      	ldr	r4, [pc, #36]	; (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f001 fb11 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7fe ffc1 	bl	8000664 <main>
  bx lr
 80016e2:	4770      	bx	lr
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80016ec:	08002d8c 	.word	0x08002d8c
  ldr r2, =_sbss
 80016f0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80016f4:	200000e8 	.word	0x200000e8

080016f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_2_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x28>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x28>)
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f923 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff ff4c 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f93b 	bl	80019c2 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f903 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000003c 	.word	0x2000003c
 8001780:	20000044 	.word	0x20000044
 8001784:	20000040 	.word	0x20000040

08001788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x1c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x20>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_IncTick+0x20>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000044 	.word	0x20000044
 80017a8:	200000e4 	.word	0x200000e4

080017ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_GetTick+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	200000e4 	.word	0x200000e4

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4906      	ldr	r1, [pc, #24]	; (8001858 <__NVIC_EnableIRQ+0x34>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff90 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff2d 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff42 	bl	8001808 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff90 	bl	80018b0 <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5f 	bl	800185c <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff35 	bl	8001824 <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b08b      	sub	sp, #44	; 0x2c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	e161      	b.n	8001cb4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f0:	2201      	movs	r2, #1
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8150 	bne.w	8001cae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a97      	ldr	r2, [pc, #604]	; (8001c70 <HAL_GPIO_Init+0x294>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d05e      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a18:	4a95      	ldr	r2, [pc, #596]	; (8001c70 <HAL_GPIO_Init+0x294>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d875      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a1e:	4a95      	ldr	r2, [pc, #596]	; (8001c74 <HAL_GPIO_Init+0x298>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d058      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a24:	4a93      	ldr	r2, [pc, #588]	; (8001c74 <HAL_GPIO_Init+0x298>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d86f      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a2a:	4a93      	ldr	r2, [pc, #588]	; (8001c78 <HAL_GPIO_Init+0x29c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d052      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a30:	4a91      	ldr	r2, [pc, #580]	; (8001c78 <HAL_GPIO_Init+0x29c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d869      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a36:	4a91      	ldr	r2, [pc, #580]	; (8001c7c <HAL_GPIO_Init+0x2a0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d04c      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a3c:	4a8f      	ldr	r2, [pc, #572]	; (8001c7c <HAL_GPIO_Init+0x2a0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d863      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a42:	4a8f      	ldr	r2, [pc, #572]	; (8001c80 <HAL_GPIO_Init+0x2a4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d046      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a48:	4a8d      	ldr	r2, [pc, #564]	; (8001c80 <HAL_GPIO_Init+0x2a4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d85d      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a4e:	2b12      	cmp	r3, #18
 8001a50:	d82a      	bhi.n	8001aa8 <HAL_GPIO_Init+0xcc>
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d859      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <HAL_GPIO_Init+0x80>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ab1 	.word	0x08001ab1
 8001a64:	08001ac3 	.word	0x08001ac3
 8001a68:	08001b05 	.word	0x08001b05
 8001a6c:	08001b0b 	.word	0x08001b0b
 8001a70:	08001b0b 	.word	0x08001b0b
 8001a74:	08001b0b 	.word	0x08001b0b
 8001a78:	08001b0b 	.word	0x08001b0b
 8001a7c:	08001b0b 	.word	0x08001b0b
 8001a80:	08001b0b 	.word	0x08001b0b
 8001a84:	08001b0b 	.word	0x08001b0b
 8001a88:	08001b0b 	.word	0x08001b0b
 8001a8c:	08001b0b 	.word	0x08001b0b
 8001a90:	08001b0b 	.word	0x08001b0b
 8001a94:	08001b0b 	.word	0x08001b0b
 8001a98:	08001b0b 	.word	0x08001b0b
 8001a9c:	08001b0b 	.word	0x08001b0b
 8001aa0:	08001ab9 	.word	0x08001ab9
 8001aa4:	08001acd 	.word	0x08001acd
 8001aa8:	4a76      	ldr	r2, [pc, #472]	; (8001c84 <HAL_GPIO_Init+0x2a8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aae:	e02c      	b.n	8001b0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e029      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	3304      	adds	r3, #4
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e024      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e01f      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	330c      	adds	r3, #12
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e01a      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e013      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aec:	2308      	movs	r3, #8
 8001aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	611a      	str	r2, [r3, #16]
          break;
 8001af6:	e009      	b.n	8001b0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af8:	2308      	movs	r3, #8
 8001afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	615a      	str	r2, [r3, #20]
          break;
 8001b02:	e003      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          break;
 8001b0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d801      	bhi.n	8001b16 <HAL_GPIO_Init+0x13a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	e001      	b.n	8001b1a <HAL_GPIO_Init+0x13e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d802      	bhi.n	8001b28 <HAL_GPIO_Init+0x14c>
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x152>
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	3b08      	subs	r3, #8
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	210f      	movs	r1, #15
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	6a39      	ldr	r1, [r7, #32]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a9 	beq.w	8001cae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5c:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_GPIO_Init+0x2ac>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a49      	ldr	r2, [pc, #292]	; (8001c88 <HAL_GPIO_Init+0x2ac>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_GPIO_Init+0x2ac>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b74:	4a45      	ldr	r2, [pc, #276]	; (8001c8c <HAL_GPIO_Init+0x2b0>)
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3d      	ldr	r2, [pc, #244]	; (8001c90 <HAL_GPIO_Init+0x2b4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00d      	beq.n	8001bbc <HAL_GPIO_Init+0x1e0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3c      	ldr	r2, [pc, #240]	; (8001c94 <HAL_GPIO_Init+0x2b8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d007      	beq.n	8001bb8 <HAL_GPIO_Init+0x1dc>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_GPIO_Init+0x2bc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d101      	bne.n	8001bb4 <HAL_GPIO_Init+0x1d8>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x1e2>
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x1e2>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x1e2>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bce:	492f      	ldr	r1, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x2b0>)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	492b      	ldr	r1, [pc, #172]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	4921      	ldr	r1, [pc, #132]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	491d      	ldr	r1, [pc, #116]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4917      	ldr	r1, [pc, #92]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4913      	ldr	r1, [pc, #76]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01f      	beq.n	8001ca0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	490d      	ldr	r1, [pc, #52]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e01f      	b.n	8001cae <HAL_GPIO_Init+0x2d2>
 8001c6e:	bf00      	nop
 8001c70:	10320000 	.word	0x10320000
 8001c74:	10310000 	.word	0x10310000
 8001c78:	10220000 	.word	0x10220000
 8001c7c:	10210000 	.word	0x10210000
 8001c80:	10120000 	.word	0x10120000
 8001c84:	10110000 	.word	0x10110000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40010800 	.word	0x40010800
 8001c94:	40010c00 	.word	0x40010c00
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_GPIO_Init+0x2f4>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <HAL_GPIO_Init+0x2f4>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f47f ae96 	bne.w	80019f0 <HAL_GPIO_Init+0x14>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	372c      	adds	r7, #44	; 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d1e:	e003      	b.n	8001d28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	041a      	lsls	r2, r3, #16
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	400b      	ands	r3, r1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e272      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8087 	beq.w	8001e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	4b92      	ldr	r3, [pc, #584]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d00c      	beq.n	8001daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d90:	4b8f      	ldr	r3, [pc, #572]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d112      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
 8001d9c:	4b8c      	ldr	r3, [pc, #560]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001daa:	4b89      	ldr	r3, [pc, #548]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d06c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x12c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d168      	bne.n	8001e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e24c      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x76>
 8001dcc:	4b80      	ldr	r3, [pc, #512]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a7f      	ldr	r2, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e02e      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x98>
 8001de2:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7a      	ldr	r2, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b78      	ldr	r3, [pc, #480]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a77      	ldr	r2, [pc, #476]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e01d      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0xbc>
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a71      	ldr	r2, [pc, #452]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6e      	ldr	r2, [pc, #440]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0xd4>
 8001e20:	4b6b      	ldr	r3, [pc, #428]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6a      	ldr	r2, [pc, #424]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a67      	ldr	r2, [pc, #412]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fcb4 	bl	80017ac <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fcb0 	bl	80017ac <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e200      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0xe4>
 8001e66:	e014      	b.n	8001e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fca0 	bl	80017ac <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fc9c 	bl	80017ac <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1ec      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x10c>
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d063      	beq.n	8001f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eaa:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d11c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x18c>
 8001eb6:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_RCC_OscConfig+0x176>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1c0      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4939      	ldr	r1, [pc, #228]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	e03a      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff fc55 	bl	80017ac <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff fc51 	bl	80017ac <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1a1      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4927      	ldr	r1, [pc, #156]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fc34 	bl	80017ac <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff fc30 	bl	80017ac <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e180      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03a      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d019      	beq.n	8001fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff fc14 	bl	80017ac <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff fc10 	bl	80017ac <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e160      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 fa9c 	bl	80024e4 <RCC_Delay>
 8001fac:	e01c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fbfa 	bl	80017ac <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fba:	e00f      	b.n	8001fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff fbf6 	bl	80017ac <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d908      	bls.n	8001fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e146      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	42420000 	.word	0x42420000
 8001fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	4b92      	ldr	r3, [pc, #584]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1e9      	bne.n	8001fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a6 	beq.w	8002142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b8b      	ldr	r3, [pc, #556]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10d      	bne.n	8002022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a87      	ldr	r2, [pc, #540]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b85      	ldr	r3, [pc, #532]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b7f      	ldr	r3, [pc, #508]	; (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7e      	ldr	r2, [pc, #504]	; (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7ff fbb7 	bl	80017ac <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff fbb3 	bl	80017ac <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e103      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	4b75      	ldr	r3, [pc, #468]	; (800222c <HAL_RCC_OscConfig+0x4c8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x312>
 8002068:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x334>
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x356>
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a60      	ldr	r2, [pc, #384]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a5d      	ldr	r2, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x36e>
 80020ba:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a5a      	ldr	r2, [pc, #360]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff fb67 	bl	80017ac <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff fb63 	bl	80017ac <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0b1      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x37e>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff fb51 	bl	80017ac <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fb4d 	bl	80017ac <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e09b      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	4b40      	ldr	r3, [pc, #256]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214c:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d061      	beq.n	800221c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d146      	bne.n	80021ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b33      	ldr	r3, [pc, #204]	; (8002230 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb21 	bl	80017ac <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fb1d 	bl	80017ac <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e06d      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d108      	bne.n	80021a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4921      	ldr	r1, [pc, #132]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a19      	ldr	r1, [r3, #32]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	430b      	orrs	r3, r1
 80021ba:	491b      	ldr	r1, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x4cc>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff faf1 	bl	80017ac <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff faed 	bl	80017ac <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e03d      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x46a>
 80021ec:	e035      	b.n	800225a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_RCC_OscConfig+0x4cc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fada 	bl	80017ac <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff fad6 	bl	80017ac <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e026      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x498>
 800221a:	e01e      	b.n	800225a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e019      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
 8002230:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_OscConfig+0x500>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0d0      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d910      	bls.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4965      	ldr	r1, [pc, #404]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b8      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022dc:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	494d      	ldr	r1, [pc, #308]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d040      	beq.n	8002388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07f      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e073      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e06b      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4936      	ldr	r1, [pc, #216]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002358:	f7ff fa28 	bl	80017ac <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7ff fa24 	bl	80017ac <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e053      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d210      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4922      	ldr	r1, [pc, #136]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e032      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4916      	ldr	r1, [pc, #88]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	490e      	ldr	r1, [pc, #56]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f6:	f000 f821 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490a      	ldr	r1, [pc, #40]	; (8002430 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_RCC_ClockConfig+0x1cc>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1d0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f986 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
 8002430:	08002d60 	.word	0x08002d60
 8002434:	2000003c 	.word	0x2000003c
 8002438:	20000040 	.word	0x20000040

0800243c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d002      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x30>
 8002466:	2b08      	cmp	r3, #8
 8002468:	d003      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x36>
 800246a:	e027      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800246e:	613b      	str	r3, [r7, #16]
      break;
 8002470:	e027      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0c9b      	lsrs	r3, r3, #18
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d010      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0c5b      	lsrs	r3, r3, #17
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	4a11      	ldr	r2, [pc, #68]	; (80024dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800249e:	fb03 f202 	mul.w	r2, r3, r2
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e004      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	613b      	str	r3, [r7, #16]
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80024be:	613b      	str	r3, [r7, #16]
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	693b      	ldr	r3, [r7, #16]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	08002d70 	.word	0x08002d70
 80024dc:	08002d80 	.word	0x08002d80
 80024e0:	003d0900 	.word	0x003d0900

080024e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <RCC_Delay+0x34>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <RCC_Delay+0x38>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0a5b      	lsrs	r3, r3, #9
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002500:	bf00      	nop
  }
  while (Delay --);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	60fa      	str	r2, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f9      	bne.n	8002500 <RCC_Delay+0x1c>
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	2000003c 	.word	0x2000003c
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e041      	b.n	80025b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff f856 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 fa6e 	bl	8002a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d001      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e035      	b.n	8002644 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_TIM_Base_Start_IT+0x90>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x4e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d004      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x4e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_TIM_Base_Start_IT+0x94>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d111      	bne.n	8002632 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b06      	cmp	r3, #6
 800261e:	d010      	beq.n	8002642 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002630:	e007      	b.n	8002642 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40000400 	.word	0x40000400

08002658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d122      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b02      	cmp	r3, #2
 800267a:	d11b      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0202 	mvn.w	r2, #2
 8002684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9b4 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f9a7 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f9b6 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d122      	bne.n	8002708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d11b      	bne.n	8002708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0204 	mvn.w	r2, #4
 80026d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f98a 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 80026f4:	e005      	b.n	8002702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f97d 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f98c 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b08      	cmp	r3, #8
 8002714:	d122      	bne.n	800275c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b08      	cmp	r3, #8
 8002722:	d11b      	bne.n	800275c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0208 	mvn.w	r2, #8
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2204      	movs	r2, #4
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f960 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f953 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f962 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b10      	cmp	r3, #16
 8002768:	d122      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b10      	cmp	r3, #16
 8002776:	d11b      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0210 	mvn.w	r2, #16
 8002780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2208      	movs	r2, #8
 8002786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f936 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f929 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f938 	bl	8002a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0201 	mvn.w	r2, #1
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fde8 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b80      	cmp	r3, #128	; 0x80
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b80      	cmp	r3, #128	; 0x80
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa6b 	bl	8002cde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8fc 	bl	8002a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b20      	cmp	r3, #32
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b20      	cmp	r3, #32
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0220 	mvn.w	r2, #32
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa36 	bl	8002ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_TIM_ConfigClockSource+0x1c>
 8002880:	2302      	movs	r3, #2
 8002882:	e0b4      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x186>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028bc:	d03e      	beq.n	800293c <HAL_TIM_ConfigClockSource+0xd4>
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c2:	f200 8087 	bhi.w	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ca:	f000 8086 	beq.w	80029da <HAL_TIM_ConfigClockSource+0x172>
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d2:	d87f      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b70      	cmp	r3, #112	; 0x70
 80028d6:	d01a      	beq.n	800290e <HAL_TIM_ConfigClockSource+0xa6>
 80028d8:	2b70      	cmp	r3, #112	; 0x70
 80028da:	d87b      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b60      	cmp	r3, #96	; 0x60
 80028de:	d050      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x11a>
 80028e0:	2b60      	cmp	r3, #96	; 0x60
 80028e2:	d877      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028e4:	2b50      	cmp	r3, #80	; 0x50
 80028e6:	d03c      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0xfa>
 80028e8:	2b50      	cmp	r3, #80	; 0x50
 80028ea:	d873      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d058      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x13a>
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d86f      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028f4:	2b30      	cmp	r3, #48	; 0x30
 80028f6:	d064      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 80028f8:	2b30      	cmp	r3, #48	; 0x30
 80028fa:	d86b      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d060      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002900:	2b20      	cmp	r3, #32
 8002902:	d867      	bhi.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05c      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002908:	2b10      	cmp	r3, #16
 800290a:	d05a      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x15a>
 800290c:	e062      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800291e:	f000 f95e 	bl	8002bde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	609a      	str	r2, [r3, #8]
      break;
 800293a:	e04f      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800294c:	f000 f947 	bl	8002bde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800295e:	609a      	str	r2, [r3, #8]
      break;
 8002960:	e03c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296e:	461a      	mov	r2, r3
 8002970:	f000 f8be 	bl	8002af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2150      	movs	r1, #80	; 0x50
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f915 	bl	8002baa <TIM_ITRx_SetConfig>
      break;
 8002980:	e02c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f8dc 	bl	8002b4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2160      	movs	r1, #96	; 0x60
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f905 	bl	8002baa <TIM_ITRx_SetConfig>
      break;
 80029a0:	e01c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 f89e 	bl	8002af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2140      	movs	r1, #64	; 0x40
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f8f5 	bl	8002baa <TIM_ITRx_SetConfig>
      break;
 80029c0:	e00c      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f000 f8ec 	bl	8002baa <TIM_ITRx_SetConfig>
      break;
 80029d2:	e003      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	e000      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <TIM_Base_SetConfig+0xa8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_Base_SetConfig+0x28>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0x28>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a22      	ldr	r2, [pc, #136]	; (8002aec <TIM_Base_SetConfig+0xac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ae8 <TIM_Base_SetConfig+0xa8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <TIM_Base_SetConfig+0x52>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a88:	d003      	beq.n	8002a92 <TIM_Base_SetConfig+0x52>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a17      	ldr	r2, [pc, #92]	; (8002aec <TIM_Base_SetConfig+0xac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d108      	bne.n	8002aa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <TIM_Base_SetConfig+0xa8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d103      	bne.n	8002ad8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	615a      	str	r2, [r3, #20]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400

08002af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0201 	bic.w	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 030a 	bic.w	r3, r3, #10
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f023 0210 	bic.w	r2, r3, #16
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	031b      	lsls	r3, r3, #12
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	621a      	str	r2, [r3, #32]
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f043 0307 	orr.w	r3, r3, #7
 8002bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	021a      	lsls	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	609a      	str	r2, [r3, #8]
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e041      	b.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d004      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400

08002ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <memset>:
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4402      	add	r2, r0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <memset+0xa>
 8002cf8:	4770      	bx	lr
 8002cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfe:	e7f9      	b.n	8002cf4 <memset+0x4>

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	2600      	movs	r6, #0
 8002d04:	4d0c      	ldr	r5, [pc, #48]	; (8002d38 <__libc_init_array+0x38>)
 8002d06:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d08:	1b64      	subs	r4, r4, r5
 8002d0a:	10a4      	asrs	r4, r4, #2
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	f000 f81a 	bl	8002d48 <_init>
 8002d14:	2600      	movs	r6, #0
 8002d16:	4d0a      	ldr	r5, [pc, #40]	; (8002d40 <__libc_init_array+0x40>)
 8002d18:	4c0a      	ldr	r4, [pc, #40]	; (8002d44 <__libc_init_array+0x44>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002d84 	.word	0x08002d84
 8002d3c:	08002d84 	.word	0x08002d84
 8002d40:	08002d84 	.word	0x08002d84
 8002d44:	08002d88 	.word	0x08002d88

08002d48 <_init>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr

08002d54 <_fini>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr
